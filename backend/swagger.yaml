swagger: "2.0"
info:
  description: "This is a capsoten project API documentation using swagger."
  version: "1.0.0"
  title: "Capstone APIs"
  #termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ishimweisaac@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: ""
#basePath: "/v2"
#tags:
# - name: "Articles"
#  description: "Everything about Article APIs"
# externalDocs:
#  description: "Find out more"
# url: "http://swagger.io"
schemes:
  #- "https"
  - "http"
paths:
  /blogs:
    post:
      tags:
        - "Articles"
      summary: "Post new article"
      description: ""
      operationId: "addArticle"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Article object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Article"
      responses:
        "200":
          description: "Article created successfully"
      security:
        - petstore_auth:
            - "write:articles"
            - "read:articles"
    put:
      tags:
        - "Articles"
      summary: "Update an existing article"
      description: ""
      operationId: "updateArticle"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Article object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Article"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:articles"
            - "read:articles"
  /blogs/{blogId}:
    get:
      tags:
        - "Articles"
      summary: "Find a blog by ID"
      description: "Returns a single article"
      operationId: "getArticleById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "blogId"
          in: "path"
          description: "ID of article to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - api_key: []
    post:
      tags:
        - "Articles"
      summary: "Updates a article in the store with form data"
      description: ""
      operationId: "updateArticleWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "title"
          in: "formData"
          description: ""
          required: false
          type: "string"
        - name: "author"
          in: "formData"
          description: ""
          required: false
          type: "string"
        - name: "content"
          in: "formData"
          description: ""
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:blogs"
            - "read:blogs"
    delete:
      tags:
        - "Articles"
      summary: "Deletes an article"
      description: ""
      operationId: "deleteArticle"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Pet id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:blogs"
            - "read:blogs"

  /contact:
    post:
      tags:
        - "Contact form"
      summary: "Create new message"
      description: ""
      operationId: "addMessage"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Message object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Query"
      responses:
        "200":
          description: "Message created successfully"
      security:
        - petstore_auth:
            - "write:queries"
            - "read:queries"
  /contact/{messageId}:
    get:
      tags:
        - "Contact form"
      summary: "Find a message by ID"
      description: "Returns a single message"
      operationId: "getMessageById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "messageId"
          in: "path"
          description: "ID of the message to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contact"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Message not found"
      security:
        - api_key: []
    post:
      tags:
        - "Contact form"
      summary: "Updates a article in the store with form data"
      description: ""
      operationId: "updateMessageWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "title"
          in: "formData"
          description: ""
          required: false
          type: "string"
        - name: "author"
          in: "formData"
          description: ""
          required: false
          type: "string"
        - name: "content"
          in: "formData"
          description: ""
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:blogs"
            - "read:blogs"
    delete:
      tags:
        - "Contact form"
      summary: "Deletes a message"
      description: ""
      operationId: "deleteMessage"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Message id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:contact"
            - "read:contact"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /auth:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Articles:
    type: "object"
    properties:
      title:
        type: "string"
      author:
        type: "string"
      content:
        type: "string"
    xml:
      name: "Articles"
  ContactMessage:
    type: "object"
    properties:
      fullName:
        type: "string"
      email:
        type: "string"
      message:
        type: "string"
    xml:
      name: "ContactMessage"
  User:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
